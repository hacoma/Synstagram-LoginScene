//
//  LoginViewController.swift
//  LoginScene
//
//  Created by hacoma on 2020/10/09.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class {
    
    func showLoadingView()
    func hideLoadingView()
    
    func displayAlbumList(viewModel: LoginModel.ViewModel.AlbumToken)
    func displayError(viewModel: LoginModel.ViewModel.Error)
}

public final class LoginViewController: UIViewController {
    
    @IBOutlet private weak var contentView: ContentView!
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic)?
    
    var dependencies: Dependencies?
    
    public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    public override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    public override var shouldAutorotate: Bool {
        return false
    }
    
    public override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }
}

extension LoginViewController {
    
    private func configureView() {
        configureContentView()
    }
    
    private func configureContentView() {
        contentView.interactor = interactor
        interactor?.requestIsAlreadyLogin()
    }
}

extension LoginViewController: LoginDisplayLogic {
    
    func showLoadingView() {
        // TODO: show loading view for network async request start
    }
    
    func hideLoadingView() {
        // TODO: hide loading view for network async request finish
    }
    
    func displayAlbumList(viewModel: LoginModel.ViewModel.AlbumToken) {
        router?.routeToAlbumList(username: viewModel.username)
    }
    
    func displayError(viewModel: LoginModel.ViewModel.Error) {
        contentView.transitionFailedLogin()
    }
}
