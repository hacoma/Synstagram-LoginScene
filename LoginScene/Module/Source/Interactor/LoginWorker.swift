//
//  LoginWorker.swift
//  LoginScene
//
//  Created by hacoma on 2020/10/09.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import APIService

final class LoginWorker {
    
    typealias Completion = (Result<LoginModel.Response.Entity, LoginModel.Response.Error>) -> Void
    
    func requestIsAlreadyLogin(completion: @escaping Completion) {
        AuthService.requestIsAlreadyLogin { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let dto):
                let entity = self.createLoginEntity(dto: dto)
                completion(.success(entity))
            case .failure(let error):
                let mappedError = self.createLoginError(error: error)
                completion(.failure(mappedError))
            }
        }
    }
    
    func requestLogin(request: LoginModel.Request, completion: @escaping Completion) {
        AuthService.requestLogin(request: request.toAuthService) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let dto):
                let entity = self.createLoginEntity(dto: dto)
                completion(.success(entity))
            case .failure(let error):
                let mappedError = self.createLoginError(error: error)
                completion(.failure(mappedError))
            }
        }
    }
}

extension LoginWorker {
    
    private func createLoginEntity(dto: AuthLoginModel.Response.DTO) -> LoginModel.Response.Entity {
        let parsedEntity = LoginModelDTOMapper.map(dto: dto)
        let failedEntity = LoginModel.Response.Entity()
        
        let isLogin = validateIsLogin(entity: parsedEntity)
        let result = isLogin ? parsedEntity : failedEntity
        
        return result
    }
    
    private func validateIsLogin(entity: LoginModel.Response.Entity) -> Bool {
        return entity.success && !entity.sid.isEmpty && !entity.username.isEmpty
    }
}

extension LoginWorker {
    
    private func createLoginError(error: AuthLoginModel.Response.Error) -> LoginModel.Response.Error {
        return LoginModelErrorMapper.map(error: error)
    }
}

private extension LoginModel.Request {
    
    var toAuthService: AuthLoginModel.Request {
        return AuthLoginModel.Request(username: username,
                                      password: password,
                                      isRemember: isRemember)
    }
}
