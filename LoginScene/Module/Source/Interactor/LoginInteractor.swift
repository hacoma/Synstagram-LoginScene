//
//  LoginInteractor.swift
//  LoginScene
//
//  Created by hacoma on 2020/10/09.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic: AnyObject {
    
    func requestIsAlreadyLogin()
    func requestLogin(request: LoginModel.Request)
}

final class LoginInteractor: LoginBusinessLogic {
    
    var presenter: LoginPresentationLogic?
    
    private let worker = LoginWorker()
    
    func requestIsAlreadyLogin() {
        presenter?.showLoadingView()
        worker.requestIsAlreadyLogin { [weak self] result in
            self?.presenter?.hideLoadingView()
            switch result {
            case .success(let entity):
                self?.handleIsAlreadyLoginRequestSuccess(entity: entity)
            case .failure:
                return
            }
        }
    }
    
    func requestLogin(request: LoginModel.Request) {
        presenter?.showLoadingView()
        worker.requestLogin(request: request) { [weak self] result in
            self?.presenter?.hideLoadingView()
            switch result {
            case .success(let entity):
                self?.handleLoginRequestSuccess(entity: entity)
            case .failure(let error):
                self?.handleLoginRequestFailure(error: error)
            }
        }
    }
}

extension LoginInteractor {
    
    private func handleIsAlreadyLoginRequestSuccess(entity: LoginModel.Response.Entity) {
        guard entity.success else { return }
        presenter?.presentAlbumList(entity: entity)
    }
}

extension LoginInteractor {
    
    private func handleLoginRequestSuccess(entity: LoginModel.Response.Entity) {
        if entity.success {
            presenter?.presentAlbumList(entity: entity)
        } else {
            presenter?.presentError(error: .invalidUsernameOrPassword)
        }
    }
    
    private func handleLoginRequestFailure(error: LoginModel.Response.Error) {
        presenter?.presentError(error: error)
    }
}
